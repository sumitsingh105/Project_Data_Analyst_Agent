* **1. Extract URL:** Extract the URL `https://en.wikipedia.org/wiki/List_of_highest-grossing_films` from the task description.

* **2. Scrape the webpage:** Use Playwright to scrape the webpage at the extracted URL.  Capture all tables present on the page, including those loaded dynamically via JavaScript. Save the scraped HTML as an intermediate file (e.g., `wikipedia_page.html`).

* **3. Parse tables:**  Use BeautifulSoup to parse the HTML from `wikipedia_page.html` and identify all tables.  Use pandas to convert each table into a DataFrame, handling any hidden tables (those without visible captions). Save each DataFrame as a separate CSV file (e.g., `table1.csv`, `table2.csv`, etc.).

* **4. Generate semantic embeddings:**  For each parsed table, generate a summary (e.g., a concise description of the table's contents). Use the Gemini embeddings API to create semantic embeddings for each table summary. Store these embeddings.

* **5. Embed user query and compute similarity:**  Embed the user's questions (from the task description) using the Gemini embeddings API. Compute the cosine similarity between each table's embedding and the user query embedding.

* **6. Rerank top-k similar tables:** Use Gemini Pro to rerank the tables based on their similarity scores. Select the single most similar table (k=1).

* **7. Save the best-matching table:** Save the best-matching table DataFrame as `matched_table.csv`.

* **8. Extract metadata:** Extract the column names and a sample of rows (e.g., the first 5 rows) from `matched_table.csv`. This metadata will be used for code generation.

* **9. Send metadata and task description to Gemini for code generation:** Send the extracted metadata, along with the complete task description (including the questions and the image format specification), to the Gemini API for code generation.  Request Python code that answers the questions using the `matched_table.csv` data, creating the scatterplot and encoding it as a base-64 data URI.

* **10. Execute the generated code:** Execute the Python code generated by Gemini.  Capture the JSON array of strings containing the answers to questions 1, 2, and 3, and the base-64 encoded scatterplot image (as a string).  Return this as the final output.